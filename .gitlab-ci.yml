# Required environment variables defined by GitLab's settings:
#   HUB_USER:           Docker Hub user
#   HUB_TOKEN:          Docker Hub token
#   HUB_REPO_BACKEND:   Docker Hub project name for backend
#   HUB_REPO_FRONTEND:  Docker Hub project name for frontend / caddy
variables:
  MONGO_URI: 'mongodb://mongo:27017/hhahaiti'
  PASSWORD_SEED: 'C@td0g'
  IS_GITLAB_CI: 'true'
stages:
  - validate
  - build-dependencies
  - test-dependencies
  - build
  - upload
  - deploy
validate-prettier:
  stage: validate
  image: node:16
  tags:
    - docker
  only:
    - master
    - staging
    - merge_requests
  before_script:
    - npm ci
  script:
    - npm run check-format
test-build-common:
  stage: build-dependencies
  image: node:16
  tags:
    - docker
  only:
    - master
    - staging
    - merge_requests
  before_script:
    - cd common
    - npm ci
  script:
    - npm run test
    - npm run build
  after_script:
    - cd common && tar -czf ../common_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - common_build.tar.gz
test-build-server:
  services:
    - mongo:5.0.14-focal
  stage: build
  image: node:16
  tags:
    - docker
  only:
    - master
    - staging
    - merge_requests
  before_script:
    - cd server
    - npm ci
    - npm install ../common_build.tar.gz
    - npm run seed
  script:
    - npm run test
  after_script:
    - cd server && tar -czvf ../server_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - server_build.tar.gz

build-client:
  stage: build
  image: node:16
  tags:
    - docker
  only:
    - master
    - staging
    - merge_requests
  before_script:
    - cd client
    - npm ci
    - npm install ../common_build.tar.gz
  script:
    # TODO: remove "CI=false", temporarily required because the project has warnings during the build
    - CI=false GENERATE_SOURCEMAP=false npm run build
  after_script:
    - cd client/build && tar -czvf ../../client_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - client_build.tar.gz

.upload-script: &upload-script
  # remove unused images
  - docker image prune -a -f
  - cp /var/hhahaiti/.env ./.env
  - export IMAGE_TAG=v$(git show -s --format=%cs $CI_COMMIT_SHA).`git rev-parse --short=8 $CI_COMMIT_SHA`
  - echo "Docker hub user ='$HUB_USER',     version='$IMAGE_TAG'"
  - echo "Full tag (backend) is               = $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG"
  - echo "Full tag (rev-proxy & frontend) is  = $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG"
  - export SERVER_IMAGE="$HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG"
  - export CLIENT_IMAGE="$HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG"
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml build
  - docker login -u $HUB_USER -p $HUB_TOKEN
  - docker push $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG
  - docker push $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG
  - docker image prune -a -f # remove unused images since we just built new ones

.deploy-script: &deploy-script
  - docker image prune -a -f
  - cp /var/hhahaiti/.env ./.env
  - export IMAGE_TAG=v$(git show -s --format=%cs $CI_COMMIT_SHA).`git rev-parse --short=8 $CI_COMMIT_SHA`
  - echo "Docker hub user ='$HUB_USER',     version='$IMAGE_TAG'"
  - echo "Full tag (backend) is               = $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG"
  - echo "Full tag (rev-proxy & frontend) is  = $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG"
  - export SERVER_IMAGE="$HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG"
  - export CLIENT_IMAGE="$HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG"
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
  - bash -c 'sleep 15'
  - docker images
  - docker ps -a
  - docker volume ls
  - docker image prune -a -f # remove unused images since we just built new ones

deploy-upload-docker:
  stage: upload
  image: docker:dind
  tags:
    - deploy-development
  only:
    - master
  script:
    - *upload-script

deploy-development:
  stage: deploy
  environment:
    name: development
    url: https://hhahaiti-dev.cmpt.sfu.ca
  tags:
    - deploy-development
  only:
    - master
  script:
    - *deploy-script

deploy-staging:
  stage: deploy
  environment:
    name: staging
    url: https://hhahaiti-stg.cmpt.sfu.ca
  tags:
    - deploy-staging
  only:
    - staging
  script:
    - *deploy-script
