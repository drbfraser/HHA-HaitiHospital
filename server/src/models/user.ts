import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import * as ENV from 'utils/processEnv';
import Departments from 'utils/departments';
import { UserApiOut } from '../routes/api/jsons/user';
import { logger } from '../logger';
import { isMatch, reject } from 'lodash';
const argon2 = require('argon2');

const { Schema } = mongoose;

export enum Role {
  Admin = 'Admin',
  MedicalDirector = 'Medical Director',
  HeadOfDepartment = 'Head of Department',
  BioMechanic = 'Bio Mechanic',
  User = 'User',
}

// User is used internally. Currently _id is optional since _id is generated by mongodb.
// May want to use uuid if so, can add replace _id with id and modify the schema accordingly into this.
export interface User {
  _id?: string;
  username: string;
  password: string;
  name: string;
  role: string;
  departmentId: string;
  createdAt: Date;
  updatedAt: Date;
}

interface UserWithInstanceMethods extends User {
  toJson: () => Promise<UserApiOut.UserJson>;
  generateJWT: () => any;
  registerUser: (newUser: any, callback: Function) => void;
  comparePassword: (otherPw: any, callback: Function) => void;
}
const userSchema = new Schema<UserWithInstanceMethods>(
  {
    username: {
      type: String,
      lowercase: true,
      unique: true,
      required: [true, "can't be blank"],
      match: [/^[a-zA-Z0-9_]+$/, 'Only letters, numbers and underscore allowed'],
      index: true,
    },
    password: {
      type: String,
      trim: true,
    },
    name: String,
    role: { type: String, default: Role.User },
    departmentId: { type: String, required: true },
  },
  {
    timestamps: true,
    writeConcern: {
      w: 'majority',
    },
  },
);

userSchema.methods.toJson = async function (): Promise<UserApiOut.UserJson> {
  return {
    id: this._id,
    name: this.name,
    role: this.role,
    department: {
      id: this.departmentId,
      name: await Departments.Database.getDeptNameById(this.departmentId),
    },
    createdAt: this.createdAt,
    updatedAt: this.updatedAt,
  };
};

userSchema.methods.generateJWT = function () {
  const token = jwt.sign(
    {
      expiresIn: '12h',
      id: this._id,
      username: this.username,
      name: this.name,
      role: this.role,
    },
    ENV.JWT_SECRET,
  );
  return token;
};

userSchema.methods.registerUser = async (newUser, callback) => {
  // Using Argon2id June 12, 2023. Password is automatically hashed using this algorithm
  try {
    await hashPassword(newUser.password)
      .then((hash) => {
        newUser.password = hash;
      })
      .then(() => newUser.save({ new: true }, callback));
  } catch (err) {
    logger.log(err);
  }

  // bcrypt.genSalt(10, (err, salt) => {
  //   bcrypt.hash(newUser.password, salt, (err, hash) => {
  //     if (err) {
  //       logger.error(err);
  //     }
  //     // set pasword to hash
  //     newUser.password = hash;
  //     newUser.save({ new: true }, callback);
  //   });
  // });
};

userSchema.methods.comparePassword = async function (candidatePassword, callback) {
  try {
    if (await argon2.verify(this.password, candidatePassword)) {
      callback(null, true);
    } else {
      return callback(null, false);
    }
  } catch (err) {
    return callback(err);
  }

  // bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
  //   if (err) return callback(err);
  //   callback(null, isMatch);
  // });
};

export async function hashPassword(password): Promise<string> {
  // Using Argon2id June 12, 2023. Password is automatically hashed using this algorithm
  try {
    const hashedPassword = await argon2.hash(password, { type: argon2.argon2id });
    return hashedPassword;
  } catch (err) {
    logger.log(err);
    return err;
  }

  // const hashedPassword: string = await new Promise((resolve, reject) => {
  //   bcrypt.hash(password, saltRounds, function (err, hash) {
  //     if (err) reject(err);
  //     else resolve(hash);
  //   });
  // });
}

export const USER_MODEL_NAME = 'User';
const UserCollection = mongoose.model<UserWithInstanceMethods>(USER_MODEL_NAME, userSchema);
export default UserCollection;
